import org.eclipse.smarthome.core.library.types.DecimalType


rule HeatingControlerRule
when
    Time cron "0 0/10 * * * ?"
then
    heizung_stellwert.members.forEach [ item |
        //get base name
        logDebug("HeatingControllerRule: item.name:", item.name)
        val String item_base_name = sp.name.substring(1,6)
        logDebug("HeatingControllerRule: item_base_name:", item_base_name)
        
        //get input values
        val temp_ist    = Temperatur.allMembers.filter(m | All.name.equals("TI" + item_base_name)).last.state as DecimalType
        val temp_soll   = Temperatur.allMembers.filter(m | All.name.equals("TS" + item_base_name)).last.state as DecimalType
        val u_default   = Temperatur.allMembers.filter(m | All.name.equals("UD" + item_base_name)).last.state as DecimalType
        val s_error     = Temperatur.allMembers.filter(m | All.name.equals("ETI" + item_base_name)).last.state as DecimalType         
        
        //control algorithm
        var u_nxt=0;
        if((temp_ist<1) || (temp_ist>35) || (s_error != 0)){
            ar u_nxt=u_default
        }else{
		    if (temp_diff>1)    {u_nxt=0}
		    if (temp_diff<-1)   {u_nxt=15}
	    }
        if(Sommerbetrieb.state==ON){u_nxt=0}

        //postUpdate
        item.postUpdate(u_nxt)
    ]
end


rule CalcTempUgRule
when
    Item TI_UG_HS received update or
    Item TI_UG_HN received update
then
    var mean_temp=((TI_UG_HN.state as Number)+(TI_UG_HS.state as Number))/2
    TI_UG_H1.postUpdate(mean_temp)
    TI_UG_H2.postUpdate(mean_temp)
    TI_UG_H3.postUpdate(mean_temp)
end


rule CalcTempEgRule
when
    Item TI_UG_GA received update or
    Item TI_EG_EZ received update
then
    var temp=TI_EG_GA.state as Number
    TI_EG_GR.postUpdate(temp)
    TI_EG_WC.postUpdate(temp)
    var temp=TI_EG_EZ.state as Number
    TI_EG_E1.postUpdate(temp)
    TI_EG_E2.postUpdate(temp)
end


rule RuleUpdateSetpoints
when
    Member of heizung_stellwert received update
then
    logInfo("RuleUpdateSetpoints", "The item " + triggeringItem.name + " received update " + triggeringItem.state)
    val message = "!w!" + triggeringItem.name + String::format("!%1$01d$\n",(triggeringItem.state as DecimalType).intValue)
    sendCommand(RS485_Gateway_out, message)  
    logInfo("RuleUpdateSetpoints", message)
end














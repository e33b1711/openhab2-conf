import java.util.Map

val Map<String, Timer> lightTimers = newHashMap

rule RuleLightTimerAlways
when
     Member of AlwaysTimer changed from OFF to ON
then
    if (lightTimers.containsKey(triggeringItem.name)){
        lightTimers.get(triggeringItem.name)?.cancel()
        logInfo("RuleLightTimers", "Canceled old timer for " + triggeringItem.name)
    }
    lightTimers.put( triggeringItem.name, createTimer(now.plusSeconds(600), [|
        triggeringItem.sendCommand(OFF)
        lightTimers.put(triggeringItem.name, null) // remove the timer from the Hashmap
        logInfo("RuleLightTimers", "Destroyed timer for " + triggeringItem.name)
    ]))
    logInfo("RuleLightTimersAlways", "Created timer for " + triggeringItem.name)
end

rule RuleLightTimer
when
     Member of Licht changed from OFF to ON
then
    if (now.getHourOfDay()>22 || now.getHourOfDay < 5){ 
        if (lightTimers.containsKey(triggeringItem.name)){
            lightTimers.get(triggeringItem.name)?.cancel()
            logInfo("RuleLightTimers", "Canceled old timer for " + triggeringItem.name)
        }
        lightTimers.put( triggeringItem.name, createTimer(now.plusSeconds(600), [|
            triggeringItem.sendCommand(OFF)
            lightTimers.put(triggeringItem.name, null) // remove the timer from the Hashmap
            logInfo("RuleLightTimers", "Destroyed timer for " + triggeringItem.name)
        ]))
        logInfo("RuleLightTimers", "Created timer for " + triggeringItem.name)
    }else{
        logInfo("RuleLightTimers", "to early or late")
    }
end

rule RuleLightTimerOn
when
   Time cron "0 0 23 * * ?"
then
    logInfo("RuleLightTimersOn", "Setting all Timers...")
	Licht.members.forEach [ item |
		if (lightTimers.containsKey(item.name)){
		    lightTimers.get(item.name)?.cancel()
		    logInfo("RuleLightTimersOn", "Canceled old timer for " + item.name)
		}
		lightTimers.put( item.name, createTimer(now.plusSeconds(600), [|
		    item.sendCommand(OFF)
		    lightTimers.put(item.name, null) // remove the timer from the Hashmap
		    logInfo("RuleLightTimersOn", "Destroyed timer for " + item.name)
		]))
	]    	
end


rule SunsetOuterLight
when
	Channel 'astro:sun:home:set#event' triggered START
then
	SunsetLights.members.forEach [ item |
		item.sendCommand(ON)
     		if (lightTimers.containsKey(item.name)){
            		lightTimers.get(item.name)?.cancel()
            		logInfo("SunsetOuterLight", "Canceled old timer for " + item.name)
        	}
    		lightTimers.put( item.name, createTimer(now.plusMinutes(180), [|
        		item.sendCommand(OFF)
        		lightTimers.put(item.name, null) // remove the timer from the Hashmap
        		logInfo("SunsetOuterLight", "Destroyed timer for " + itrem.name)
    		]))
	]
    logInfo("SunsetOuterLight", "Created timer for all group items")
end


rule RuleChickenOuterLightsSet
when
   	Channel 'astro:sun:ChickenOuterLights:set#event' triggered START
then
    logInfo("RuleChickenOuterLights", "Setting all Timers...")
	ChickenOuterLights.members.forEach [ item |
        item.sendCommand(ON)
		if (lightTimers.containsKey(item.name)){
		    lightTimers.get(item.name)?.cancel()
		    logInfo("RuleChickenOuterLights", "Canceled old timer for " + item.name)
		}
		lightTimers.put( item.name, createTimer(now.plusMinutes(240), [|
		    item.sendCommand(OFF)
		    lightTimers.put(item.name, null) // remove the timer from the Hashmap
		    logInfo("RuleChickenOuterLights", "Destroyed timer for " + item.name)
		]))
	]    	
end

rule RuleChickenOuterLightsRise
when
   Channel 'astro:sun:ChickenOuterLights:rise#event' triggered START
then
    logInfo("RuleChickenOuterLights", "Setting all Timers...")
	ChickenOuterLights.members.forEach [ item |
        item.sendCommand(ON)
		if (lightTimers.containsKey(item.name)){
		    lightTimers.get(item.name)?.cancel()
		    logInfo("RuleChickenOuterLights", "Canceled old timer for " + item.name)
		}
		lightTimers.put( item.name, createTimer(now.plusMinutes(180), [|
		    item.sendCommand(OFF)
		    lightTimers.put(item.name, null) // remove the timer from the Hashmap
		    logInfo("RuleChickenOuterLights", "Destroyed timer for " + item.name)
		]))
	]    	
end
































